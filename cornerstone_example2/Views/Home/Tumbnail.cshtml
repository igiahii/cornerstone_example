
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Tumbnail</title>
    <link rel="stylesheet" href="~/Content/Css/bootstrap.css" />
    <link rel="stylesheet" href="~/Content/Css/Tumbnail.css" />
    <script src="~/Scripts/cornerstone-prev.js"></script>
    <script src="~/Scripts/cornerstone-math.js"></script>
    <script src="~/Scripts/cornerstone-tools.js"></script>
    <script src="~/Scripts/dicom-parser.js"></script>
    <script src="~/Scripts/web-image-loader.js"></script>
</head>
<body class="vh-100 w-100 overflow-hidden">
    <div class="dicom-image">
        <div class="tumbnail">
            <a class="downloadAndView" role="button">
                <img id="image-id" class="mini-image" src="~/Content/Img/Jpg/1.jpg" />
            </a>
            <a class="downloadAndView" role="button">
                <img id="image-id" class="mini-image" src="~/Content/Img/Jpg/5.jpg" />
            </a>
            <a class="downloadAndView" role="button">
                <img id="image-id" class="mini-image" src="~/Content/Img/Jpg/3.jpg" />
            </a>
            <a class="downloadAndView" role="button">
                <img id="image-id" class="mini-image" src="~/Content/Img/Jpg/4.jpg" />
            </a>
        </div>
        <div class="toolbar-button-group">
            <div class="col-xs-2">
                <label style="color:#fff" for="colormaps"> Colormap </label>
                <select id="colormaps" style="width:100%">
                    <option value="">Select...</option>
                </select>
            </div>
            <button id="invert" type="button" class="btn btn-secondary mx-2">Invert</button>
            <button id="hFlip" type="button" class="btn btn-secondary mx-2">HFlip</button>
            <button id="vFlip" type="button" class="btn btn-secondary mx-2">VFlip</button>
            <button id="zoom" type="button" class="btn btn-secondary mx-2">Zoom</button>
            <button id="wwwc" type="button" class="btn btn-secondary mx-2">Wwwc</button>
            <button id="lRotate" type="button" class="btn btn-secondary mx-2">Rotate Left</button>
            <button id="rRotate" type="button" class="btn btn-secondary mx-2">Rotate Right</button>
            <button id="reset" type="button" class="btn btn-secondary mx-2">Reset</button>
        </div>
        <div style="width:700px;height:700px;position:relative;color: white;display:inline-block;"
             oncontextmenu="return false"
             class='disable-selection noIbar'
             unselectable='on'
             onselectstart='return false;'
             onmousedown='return false;'>
            <div id="dicomImage"
                 style="width:700px;height:700px;top:0px;left:0px; position:absolute">
            </div>
        </div>
    </div>
    <script>
        cornerstoneWebImageLoader.external.cornerstone = cornerstone;
        //cornerstoneWebImageLoader.configure({
        //    beforeSend: function (xhr) {
        //        // Add custom headers here (e.g. auth tokens)
        //        //xhr.setRequestHeader('x-auth-token', 'my auth token');
        //    }
        //});
        // Populate colormap dropdown with all the default ones available
        function fillColormapsList() {
            const dropdown = document.getElementById('colormaps');
            const colormapsList = cornerstone.colors.getColormapsList();

            const addOption = function (id, name, disabled) {
                const option = document.createElement("OPTION");
                option.value = id;
                option.textContent = name;
                option.disabled = !!disabled;
                dropdown.append(option);
            };

            colormapsList.forEach(function (colormapItem) {
                addOption(colormapItem.id, colormapItem.name);
            });

        }

        const element = document.getElementById('dicomImage');
        let clickTags = document.getElementsByClassName('downloadAndView')

        for (let i = 0; i < clickTags.length; i++) {
            clickTags[i].addEventListener('click', function (e) {
                let url = e.currentTarget.querySelector(".mini-image").src
                console.log(url)
                // image enable the dicomImage element and activate a few tools
                cornerstone.enable(element);
                cornerstone.loadImage(url).then(function (image) {
                    cornerstone.displayImage(element, image);
                    cornerstoneTools.mouseInput.enable(element);
                    cornerstoneTools.mouseWheelInput.enable(element);
                    //cornerstoneTools.wwwc.activate(element, 1); // ww/wc is the default tool for left mouse button
                    //cornerstoneTools.pan.activate(element, 2); // pan is the default tool for middle mouse button
                    //cornerstoneTools.zoom.activate(element, 4); // zoom is the default tool for right mouse button
                    //cornerstoneTools.zoomWheel.activate(element); // zoom is the default tool for middle mouse wheel

                    //// add event handlers to pan image on mouse move
                    //element.addEventListener('mousedown', function (e) {
                    //    let lastX = e.pageX;
                    //    let lastY = e.pageY;
                    //    const mouseButton = e.which;

                    //    function mouseMoveHandler(e) {
                    //        const deltaX = e.pageX - lastX;
                    //        const deltaY = e.pageY - lastY;
                    //        lastX = e.pageX;
                    //        lastY = e.pageY;

                    //        if (mouseButton === 1) {
                    //            let viewport = cornerstone.getViewport(element);
                    //            viewport.voi.windowWidth += (deltaX / viewport.scale);
                    //            viewport.voi.windowCenter += (deltaY / viewport.scale);
                    //            cornerstone.setViewport(element, viewport);
                    //        } else if (mouseButton === 2) {
                    //            let viewport = cornerstone.getViewport(element);
                    //            viewport.translation.x += (deltaX / viewport.scale);
                    //            viewport.translation.y += (deltaY / viewport.scale);
                    //            cornerstone.setViewport(element, viewport);
                    //        } else if (mouseButton === 3) {
                    //            let viewport = cornerstone.getViewport(element);
                    //            viewport.scale += (deltaY / 100);
                    //            cornerstone.setViewport(element, viewport);
                    //        }
                    //    }

                    //    function mouseUpHandler() {
                    //        document.removeEventListener('mouseup', mouseUpHandler);
                    //        document.removeEventListener('mousemove', mouseMoveHandler);
                    //    }

                    //    document.addEventListener('mousemove', mouseMoveHandler);
                    //    document.addEventListener('mouseup', mouseUpHandler);
                    //});
                });
            })
        }
        // Add event handlers to flip or rotate the image
        document.getElementById('hFlip').addEventListener('click', function (e) {
            const viewport = cornerstone.getViewport(element);
            viewport.hflip = !viewport.hflip;
            cornerstone.setViewport(element, viewport);
        });

        document.getElementById('vFlip').addEventListener('click', function (e) {
            const viewport = cornerstone.getViewport(element);
            viewport.vflip = !viewport.vflip;
            cornerstone.setViewport(element, viewport);
        });

        document.getElementById('lRotate').addEventListener('click', function (e) {
            const viewport = cornerstone.getViewport(element);
            viewport.rotation -= 90;
            cornerstone.setViewport(element, viewport);
        });

        document.getElementById('rRotate').addEventListener('click', function (e) {
            const viewport = cornerstone.getViewport(element);
            viewport.rotation += 90;
            cornerstone.setViewport(element, viewport);
        });
        document.getElementById('invert').addEventListener('click', function (e) {
            const viewport = cornerstone.getViewport(element);
            viewport.invert = !viewport.invert;
            cornerstone.setViewport(element, viewport);
        });

        // Add event handlers to zoom the image in and out
        document.getElementById('zoom').addEventListener('click', function (e) {
            this.classList.toggle('is-active')
            if (this.classList.contains('is-active')) {
                cornerstoneTools.zoom.activate(element, 1); // zoom is the default tool for right mouse button
                cornerstoneTools.zoomWheel.activate(element); // zoom is the default tool for middle mouse wheel
            } else {
                cornerstoneTools.zoom.deactivate(element, 1); // zoom is the default tool for right mouse button
                cornerstoneTools.zoomWheel.deactivate(element); // zoom is the default tool for middle mouse wheel
                console.log("is not active yet")
            }
            //const viewport = cornerstone.getViewport(element);
            //viewport.scale += 0.25;
            //cornerstone.setViewport(element, viewport);
        });
        document.getElementById('wwwc').addEventListener('click', function (e) {
            this.classList.toggle('is-active')
            if (this.classList.contains('is-active')) {
                cornerstoneTools.wwwc.activate(element, 1); // ww/wc is the default tool for left mouse button
            } else {
                cornerstoneTools.wwwc.deactivate(element, 1); // ww/wc is the default tool for left mouse button
            }
        });


        document.getElementById('reset').addEventListener('click', function (e) {
            cornerstone.reset(element);
        });

        //color mapping -------------------------------------------------------------------------------------
       
      
        // Dropdown listener to get the new colormap
        // selected by the user and update the image
        function colormapChanged() {
            const viewport = cornerstone.getViewport(element);
            const colormapId = document.getElementById('colormaps').value;
            let colormap;

            // Use selected the first option ("Select...")
            if (colormapId === '') {
                return;
            } else {
                colormap = cornerstone.colors.getColormap(colormapId);
            }

            viewport.colormap = colormap;
            cornerstone.setViewport(element, viewport);
            cornerstone.updateImage(element, true);
        }

        document.getElementById('colormaps').addEventListener('change', colormapChanged);

        fillColormapsList();


        //color mapping -------------------------------------------------------------------------------------
       
    </script>
</body>
</html>
