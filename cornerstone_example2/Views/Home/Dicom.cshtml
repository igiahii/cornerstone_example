@using System.IO

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Dicom</title>
    <link rel="stylesheet" href="~/Content/Css/bootstrap.css" />
    <link rel="stylesheet" href="~/Content/Css/Dicom.css" />
    <script src="~/Scripts/jquery-3.7.1.min.js"></script>
    <script src="~/Scripts/cornerstone-prev.js"></script>
    <script src="~/Scripts/cornerstone-math.js"></script>
    <script src="~/Scripts/cornerstone-tools.js"></script>
    <script src="~/Scripts/dicom-parser.js"></script>
    <script src="~/Scripts/cornerstone-wado-image-loader@4.13.2.js"></script>
    <script src="~/Scripts/initializeWebWorkers.js"></script>
    <script src="~/Scripts/cornerstone-uids.js"></script>
</head>
<body>
    <div class="dicom">
        <div class="dicom-tumbnail">
            <div class="active tumbnail-item">
                <img id="item1" class="tumbnail-image" src="~/Content/Img/series/tmb/SR001.jpg" />
            </div>
            <div class="tumbnail-item">
                <img class="tumbnail-image" src="~/Content/Img/series/tmb/SR004.jpg" />
            </div>
        </div>
        <div class="dicom-container" data-files="@ViewBag.Files">
            <div style="width:100%;height:100%;position:relative;color: white;display:inline-block;border-style:solid;border-color:black;" oncontextmenu="return false" class="disable-selection noIbar" unselectable="on" onselectstart="return false;" onmousedown="return false;">
                <div id="dicomImage" style="width:100%;height:100%"> </div>
            </div>
            <div class="top-left-details text-white">
                <span class="h3 fw-bold" id="PatientName"></span>
                <span>
                    <span>ID: </span><span class="fw-bold" id="PatientID"></span>
                </span>
                <span>
                    <span>Age: </span><span class="fw-bold" id="PatientAge"></span>
                </span>
                <!--<span>Image Type: </span><span id="ImageType"></span><br>
                <span>Operator's Name: </span><span id="OperatorName"></span><br>
                <span>Patient Gender: </span><span id="PatientSex"></span><br>
                <span>Institution Name: </span><span id="InstitutionName"></span><br>-->
                @*<span>Number Of Frames: </span><span id="numberOfFrames"></span><br>
                    <span>Planar Configuration: </span><span id="planarConfiguration"></span><br>
                    <span>Rows: </span><span id="rows"></span><br>
                    <span>Columns: </span><span id="columns"></span><br>
                    <span>Pixel Spacing: </span><span id="pixelSpacing"></span><br>
                    <span>Row Pixel Spacing: </span><span id="rowPixelSpacing"></span><br>
                    <span>Column Pixel Spacing: </span><span id="columnPixelSpacing"></span><br>
                    <span>Bits Allocated: </span><span id="bitsAllocated"></span><br>
                    <span>Bits Stored: </span><span id="bitsStored"></span><br>
                    <span>High Bit: </span><span id="highBit"></span><br>
                    <span>Pixel Representation: </span><span id="pixelRepresentation"></span><br>
                    <span>WindowCenter: </span><span id="windowCenter"></span><br>
                    <span>WindowWidth: </span><span id="windowWidth"></span><br>
                    <span>RescaleIntercept: </span><span id="rescaleIntercept"></span><br>
                    <span>RescaleSlope: </span><span id="rescaleSlope"></span><br>
                    <span>Basic Offset Table Entries: </span><span id="basicOffsetTable"></span><br>
                    <span>Fragments: </span><span id="fragments"></span><br>
                    <span>Max Stored Pixel Value: </span><span id="minStoredPixelValue"></span><br>
                    <span>Min Stored Pixel Value: </span><span id="maxStoredPixelValue"></span><br>*@
                <!--<span>Total Time: </span><span id="totalTime"></span><br>
                <span>Load Time: </span><span id="loadTime"></span><br>
                <span>Decode Time: </span><span id="decodeTime"></span><br>-->
            </div>
            <div class="bottom-left-details text-white">
                <span>
                    <span>Thk: </span><span class="fw-bold" id="Thk"></span>
                </span>
                <span>
                    <span>Size: </span><span class="fw-bold" id="rows"></span>,<span class="fw-bold" id="columns"></span>
                </span>
                <span>
                    <span>Scale: </span><span class="fw-bold" id="Scale"></span>
                </span>
                <span>
                    <span>W: </span><span class="fw-bold" id="WW"></span>&nbsp;&nbsp;<span>L: </span><span class="fw-bold" id="WL"></span>
                </span>
            </div>
            <div class="top-right-details text-white">
                <span>
                    <span>Frame: </span><span class="fw-bold" id="FrameNum"></span>
                </span>
                <span>
                    <span>Date: </span><span class="fw-bold" id="Date"></span>
                </span>
                <span>
                    <span>Time: </span><span class="fw-bold" id="Time"></span>
                </span>
               <span class="fw-bold" id="ImageType"></span>
            </div>
            <div class="right-details">
                <input class="range-slider" type="range" min="0" max="100" value="0" />
            </div>
            <div class="bottom-right-details text-white">
                <span>
                    <span id="InstitutionName"></span>
                </span>
            </div>
        </div>
    </div>
    <script>

        cornerstoneWADOImageLoader.external.cornerstone = cornerstone;

        //// this function gets called once the user drops the file onto the div
        //function handleFileSelect(evt) {
        //    evt.stopPropagation();
        //    evt.preventDefault();

        //    // Get the FileList object that contains the list of files that were dropped
        //    const files = evt.dataTransfer.files;

        //    // this UI is only built for a single file so just dump the first one
        //    file = files[0];
        //    const imageId = cornerstoneWADOImageLoader.wadouri.fileManager.add(file);
        //    loadAndViewImage(imageId);
        //}

        //function handleDragOver(evt) {
        //    evt.stopPropagation();
        //    evt.preventDefault();
        //    evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
        //}

        //// Setup the dnd listeners.
        //const dropZone = document.getElementById('dicomImage');
        //dropZone.addEventListener('dragover', handleDragOver, false);
        //dropZone.addEventListener('drop', handleFileSelect, false);


        //cornerstoneWADOImageLoader.configure({
        //    beforeSend: function (xhr) {
        //        // Add custom headers here (e.g. auth tokens)
        //        //xhr.setRequestHeader('x-auth-token', 'my auth token');
        //    },
        //});
        //let path = document.querySelector(".dicom-container").dataset.path
        let Files = JSON.parse(document.querySelector(".dicom-container").dataset.files)
        let path1 = document.querySelector("#item1").src
        path1 = path1.replace(".jpg", "/")
        path1 = path1.replace("/tmb", "")
        path1 = path1.concat(Files[0])
        console.log(path1)
        let baseUrl = document.querySelector(".dicom-container").dataset.baseurl
        let loaded = false;
        //let imageId = "wadouri:" + window.location.origin + "/" + path;
        let imageId = "wadouri:" + path1;
        console.log(imageId)
        loadAndViewImage(imageId)

        function loadAndViewImage(imageId) {
            const element = document.getElementById('dicomImage');
            const start = new Date().getTime();
            cornerstone.loadImage(imageId).then(function (image) {
                console.log(image);
                const viewport = cornerstone.getDefaultViewportForImage(element, image);
                //document.getElementById('toggleModalityLUT').checked = (viewport.modalityLUT !== undefined);
                //document.getElementById('toggleVOILUT').checked = (viewport.voiLUT !== undefined);
                cornerstone.displayImage(element, image, viewport);
                if (loaded === false) {
                    cornerstoneTools.mouseInput.enable(element);
                    cornerstoneTools.mouseWheelInput.enable(element);
                    cornerstoneTools.wwwc.activate(element, 1); // ww/wc is the default tool for left mouse button
                    cornerstoneTools.pan.activate(element, 2); // pan is the default tool for middle mouse button
                    cornerstoneTools.zoom.activate(element, 4); // zoom is the default tool for right mouse button
                    //cornerstoneTools.zoomWheel.activate(element); // zoom is the default tool for middle mouse wheel

                    //cornerstoneTools.imageStats.enable(element);
                    loaded = true;
                }

                function getTransferSyntax() {
                    const value = image.data.string('x00020010');
                    return value + ' [' + uids[value] + ']';
                }

                function getSopClass() {
                    const value = image.data.string('x00080016');
                    return value + ' [' + uids[value] + ']';
                }

                function getPixelRepresentation() {
                    const value = image.data.uint16('x00280103');
                    if (value === undefined) {
                        return;
                    }
                    return value + (value === 0 ? ' (unsigned)' : ' (signed)');
                }

                function getPlanarConfiguration() {
                    const value = image.data.uint16('x00280006');
                    if (value === undefined) {
                        return;
                    }
                    return value + (value === 0 ? ' (pixel)' : ' (plane)');
                }

                function onImageRendered(e) {
                    const eventData = e.detail;

                    // set the canvas context to the image coordinate system
                    cornerstone.setToPixelCoordinateSystem(eventData.enabledElement, eventData.canvasContext);
                    //document.getElementById('topright').textContent = "Render Time:" + eventData.renderTimeInMs + " ms";
                    document.getElementById('WW').textContent = Math.round(eventData.viewport.voi.windowWidth);
                    document.getElementById('WL').textContent = Math.round(eventData.viewport.voi.windowCenter);
                    document.getElementById('Scale').textContent = + eventData.viewport.scale.toFixed(2);

                }
                element.addEventListener('cornerstoneimagerendered', onImageRendered);

                //document.getElementById('transferSyntax').textContent = getTransferSyntax();
                //document.getElementById('sopClass').textContent = getSopClass();
                //document.getElementById('samplesPerPixel').textContent = image.data.uint16('x00280002');
                //document.getElementById('photometricInterpretation').textContent = image.data.string('x00280004');
                let dateUnFormated = image.data.string('x00080012')
                let dateFormated = `${dateUnFormated.slice(0, 4)}/${dateUnFormated.slice(4, 6)}/${dateUnFormated.slice(6, 8)}`
                document.getElementById('Date').textContent = dateFormated;
                document.getElementById('Time').textContent = image.data.string('x00080013');

                document.getElementById('ImageType').textContent = image.data.string('x00280008');

                document.getElementById('InstitutionName').textContent = image.data.string('x00080080');
                //document.getElementById('OperatorName').textContent = image.data.string('x00081070');
                document.getElementById('PatientName').textContent = image.data.string('x00100010').replace("^", " ");
                document.getElementById('PatientID').textContent = image.data.string('x00100020');
                //document.getElementById('Date').textContent = image.data.string('x000800012');
                document.getElementById('PatientAge').textContent = image.data.string('x00101010');
                document.getElementById('Thk').textContent = image.data.string('x00180050').concat("mm");
                /*    document.getElementById('PatientSex').textContent = image.data.string('x00100040');*/
                //document.getElementById('numberOfFrames').textContent = image.data.string('x00280008');
                //document.getElementById('planarConfiguration').textContent = getPlanarConfiguration();
                document.getElementById('rows').textContent = image.data.uint16('x00280010');
                document.getElementById('columns').textContent = image.data.uint16('x00280011');
                document.getElementById('FrameNum').textContent = `${getCurrentIndex() + 1} / ${Files.length}`
                //document.getElementById('pixelSpacing').textContent = image.data.string('x00280030');
                //document.getElementById('bitsAllocated').textContent = image.data.uint16('x00280100');
                //document.getElementById('bitsStored').textContent = image.data.uint16('x00280101');
                //document.getElementById('highBit').textContent = image.data.uint16('x00280102');
                //document.getElementById('pixelRepresentation').textContent = getPixelRepresentation();
                //document.getElementById('windowCenter').textContent = image.data.string('x00281050');
                //document.getElementById('windowWidth').textContent = image.data.string('x00281051');
                //document.getElementById('rescaleIntercept').textContent = image.data.string('x00281052');
                //document.getElementById('rescaleSlope').textContent = image.data.string('x00281053');
                //document.getElementById('basicOffsetTable').textContent = image.data.elements.x7fe00010 && image.data.elements.x7fe00010.basicOffsetTable ? image.data.elements.x7fe00010.basicOffsetTable.length : '';
                //document.getElementById('fragments').textContent = image.data.elements.x7fe00010 && image.data.elements.x7fe00010.fragments ? image.data.elements.x7fe00010.fragments.length : '';
                //document.getElementById('minStoredPixelValue').textContent = image.minPixelValue;
                //document.getElementById('maxStoredPixelValue').textContent = image.maxPixelValue;
                const end = new Date().getTime();
                const time = end - start;
                //document.getElementById('totalTime').textContent = time + "ms";
                //document.getElementById('loadTime').textContent = image.loadTimeInMS + "ms";
                //document.getElementById('decodeTime').textContent = image.decodeTimeInMS + "ms";

            }, function (err) {
                alert(err);
            });
        }
        const element = document.getElementById('dicomImage');
        cornerstone.enable(element);

      
        let StaticPath
        function getCurrentIndex() {
            const currentSrc = path1.split('/').pop(); // Extract filename from src
            StaticPath = path1.replace(currentSrc, "")
            return Files.indexOf(currentSrc);
        }

        // Function to update the image source
        function updateImage(index) {
            if (index >= 0 && index < Files.length) {
                path1 = StaticPath + Files[index]
                imageId = "wadouri:" + path1;
                loadAndViewImage(imageId)
            }
        }
        const step = 100 / (Files.length - 1)
        let rangeSlider = document.querySelector(".range-slider")
        rangeSlider.step = step
        element.addEventListener("wheel", function (event) {
            event.preventDefault()
            let currentValue = parseFloat(rangeSlider.value);
            let currentIndex = getCurrentIndex();
            if (event.deltaY < 0) {
                //scrolling up
                currentIndex--
                if (rangeSlider.value > 0) {
                    rangeSlider.value = currentValue - step
                }
            } else if (event.deltaY > 0) {
                //scrolling down
                currentIndex++
                if (rangeSlider.value < 100) {
                    rangeSlider.value = currentValue + step
                }
            }
            // Ensure the value remains within bounds (0 to 100)
            if (rangeSlider.value < 0) {
                rangeSlider.value = 0;
            } else if (rangeSlider.value > 100) {
                rangeSlider.value = 100;
            }
            updateImage(currentIndex)
        })
        rangeSlider.addEventListener("input", function () {
            let indexOfFiles = Math.floor(this.value / step)
            updateImage(indexOfFiles)
        })

        ////on click series
        //document.querySelectorAll(".tumbnail-image").forEach(imageItem => imageItem.addEventListener("click", function (event) {
        //    console.log(document.querySelectorAll(".tumbnail-item"))
        //    document.querySelectorAll(".tumbnail-item").forEach(item => item.classList.remove("active"))
        //    imageItem.parentNode.classList.add("active")
        //}))

        //cornerstone.events.addEventListener('cornerstoneimageloadprogress', function (event) {
        //    const eventData = event.detail;
        //    const loadProgress = document.getElementById('loadProgress');
        //    loadProgress.textContent = `Image Load Progress: ${eventData.percentComplete}%`;
        //});
    </script>
    <script>
        $(document).ready(function () {
            $(".tumbnail-image").on("click", function () {
                if ($(this).parent().is(".active")) return
                $(".tumbnail-item").removeClass("active")
                $(this).parent().addClass("active")
                let folderOfDicom = $(this).prop("src").replace(".jpg", "")
                folderOfDicom = folderOfDicom.split("/").pop()
                $.ajax({
                    method: "POST",
                    url: "@Url.Action("Dicom")",
                    data: {
                        folderOfDicom : folderOfDicom
                    },
                    success: function (response) {
                        if (response.successMsg) {
                            alert(response.successMsg)
                        } else {
                            alert(response.errorMsg)
                        }
                    }
                })                

            })
        })
    </script>
    @*<script>

            cornerstoneWADOImageLoader.external.cornerstone = cornerstone;

            cornerstoneWADOImageLoader.configure({
                beforeSend: function (xhr) {
                    // Add custom headers here (e.g. auth tokens)
                    //xhr.setRequestHeader('APIKEY', 'my auth token');
                },
            });

            var loaded = false;

            function loadAndViewImage(imageId) {
                var element = document.getElementById('dicomImage');

                try {
                    var start = new Date().getTime();
                    cornerstone.loadAndCacheImage(imageId).then(function (image) {
                        console.log(image);
                        var viewport = cornerstone.getDefaultViewportForImage(element, image);
                        //document.getElementById('toggleModalityLUT').checked = (viewport.modalityLUT !== undefined);
                        //document.getElementById('toggleVOILUT').checked = (viewport.voiLUT !== undefined);
                        cornerstone.displayImage(element, image, viewport);
                        if (loaded === false) {
                            cornerstoneTools.mouseInput.enable(element);
                            cornerstoneTools.mouseWheelInput.enable(element);
                            cornerstoneTools.wwwc.activate(element, 1); // ww/wc is the default tool for left mouse button
                            cornerstoneTools.pan.activate(element, 2); // pan is the default tool for middle mouse button
                            cornerstoneTools.zoom.activate(element, 4); // zoom is the default tool for right mouse button
                            cornerstoneTools.zoomWheel.activate(element); // zoom is the default tool for middle mouse wheel
                            loaded = true;
                        }

                        function getTransferSyntax() {
                            const value = image.data.string('x00020010');
                            return value + ' [' + uids[value] + ']';
                        }

                        function getSopClass() {
                            const value = image.data.string('x00080016');
                            return value + ' [' + uids[value] + ']';
                        }

                        function getPixelRepresentation() {
                            const value = image.data.uint16('x00280103');
                            if (value === undefined) {
                                return;
                            }
                            return value + (value === 0 ? ' (unsigned)' : ' (signed)');
                        }

                        function getPlanarConfiguration() {
                            const value = image.data.uint16('x00280006');
                            if (value === undefined) {
                                return;
                            }
                            return value + (value === 0 ? ' (pixel)' : ' (plane)');
                        }


                        document.getElementById('transferSyntax').textContent = getTransferSyntax();
                        document.getElementById('sopClass').textContent = getSopClass();
                        document.getElementById('samplesPerPixel').textContent = image.data.uint16('x00280002');
                        document.getElementById('photometricInterpretation').textContent = image.data.string('x00280004');
                        document.getElementById('numberOfFrames').textContent = image.data.string('x00280008');
                        document.getElementById('planarConfiguration').textContent = getPlanarConfiguration();
                        document.getElementById('rows').textContent = image.data.uint16('x00280010');
                        document.getElementById('columns').textContent = image.data.uint16('x00280011');
                        document.getElementById('pixelSpacing').textContent = image.data.string('x00280030');
                        document.getElementById('rowPixelSpacing').textContent = image.rowPixelSpacing;
                        document.getElementById('columnPixelSpacing').textContent = image.columnPixelSpacing;
                        document.getElementById('bitsAllocated').textContent = image.data.uint16('x00280100');
                        document.getElementById('bitsStored').textContent = image.data.uint16('x00280101');
                        document.getElementById('highBit').textContent = image.data.uint16('x00280102');
                        document.getElementById('pixelRepresentation').textContent = getPixelRepresentation();
                        document.getElementById('windowCenter').textContent = image.data.string('x00281050');
                        document.getElementById('windowWidth').textContent = image.data.string('x00281051');
                        document.getElementById('rescaleIntercept').textContent = image.data.string('x00281052');
                        document.getElementById('rescaleSlope').textContent = image.data.string('x00281053');
                        document.getElementById('basicOffsetTable').textContent = image.data.elements.x7fe00010.basicOffsetTable ? image.data.elements.x7fe00010.basicOffsetTable.length : '';
                        document.getElementById('fragments').textContent = image.data.elements.x7fe00010.fragments ? image.data.elements.x7fe00010.fragments.length : '';
                        document.getElementById('minStoredPixelValue').textContent = image.minPixelValue;
                        document.getElementById('maxStoredPixelValue').textContent = image.maxPixelValue;
                        var end = new Date().getTime();
                        var time = end - start;
                        document.getElementById('totalTime').textContent = time + "ms";
                        document.getElementById('loadTime').textContent = image.loadTimeInMS + "ms";
                        document.getElementById('decodeTime').textContent = image.decodeTimeInMS + "ms";

                    }, function (err) {
                        throw err;
                    });
                }
                catch (err) {
                    throw err;
                }
            }

            function downloadAndView(downloadUrl) {
                let url = downloadUrl;
                // prefix the url with wadouri: so cornerstone can find the image loader
                url = "wadouri:" + url;
                // image enable the dicomImage element and activate a few tools
                loadAndViewImage(url);
            }

            const imageButtons = document.getElementsByClassName('imgbtn');
            for (let i = 0; i < imageButtons.length; i++) {
                const el = imageButtons[i];
                el.addEventListener('click', function (e) {
                    const img = e.target.innerText;
                    downloadAndView('https://raw.githubusercontent.com/cornerstonejs/cornerstoneWADOImageLoader/master/testImages/' + 'CT2_J2KR');
                });
            }

            cornerstone.events.addEventListener('cornerstoneimageloadprogress', function (event) {
                const eventData = event.detail;
                const loadProgress = document.getElementById('loadProgress');
                loadProgress.textContent = `Image Load Progress: ${eventData.percentComplete}%`;
            });

            function getUrlWithoutFrame() {
                var url = document.getElementById('wadoURL').value;
                var frameIndex = url.indexOf('frame=');
                if (frameIndex !== -1) {
                    url = url.substr(0, frameIndex - 1);
                }
                return url;
            }

            var element = document.getElementById('dicomImage');
            cornerstone.enable(element);

            document.getElementById('downloadAndView').addEventListener('click', function (e) {
                downloadAndView();
            });
            document.getElementById('load').addEventListener('click', function (e) {
                var url = getUrlWithoutFrame();
                cornerstoneWADOImageLoader.wadouri.dataSetCacheManager.load(url);
            });
            document.getElementById('unload').addEventListener('click', function (e) {
                var url = getUrlWithoutFrame();
                cornerstoneWADOImageLoader.wadouri.dataSetCacheManager.unload(url);
            });

            document.getElementById('purge').addEventListener('click', function (e) {
                cornerstone.imageCache.purgeCache();
            });

            const form = document.getElementById('form');
            form.addEventListener('submit', function () {
                downloadAndView();
                return false;
            });

        </script>*@
</body>
</html>
