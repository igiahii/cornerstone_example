@using System.IO

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Dicom</title>
    <link rel="stylesheet" href="~/Content/Css/bootstrap.css" />
    <link rel="stylesheet" href="~/Content/Css/Dicom.css" />
    <script src="~/Scripts/bootstrap.js"></script>
    <script src="~/Scripts/jquery-3.7.1.min.js"></script>
    <script src="~/Scripts/hammerjs@2.0.8.js"></script>
    <script src="~/Scripts/dicom-parser.js"></script>
    <script src="~/Scripts/cornerstone-prev.js"></script>
    <script src="~/Scripts/cornerstone-math.js"></script>
    <script src="~/Scripts/cornerstone-tools.js"></script>
    <script src="~/Scripts/cornerstone-wado-image-loader@4.13.2.js"></script>
    <script src="~/Scripts/initializeWebWorkers.js"></script>
    <script src="~/Scripts/cornerstone-uids.js"></script>
</head>
<body>
    <!-- Modal -->
    <div class="modal fade" id="MprModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content" style="background-color: #0e151a;">
                <div class="modal-header">
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <iframe src="/Home" style="width:100%;height:540px" title="Iframe Example"></iframe>
                </div>
            </div>
        </div>
    </div>
    <div class="dicom">
        <div class="dicom-toolbar">
            <span class="fw-bold text-white loadProgress"></span>
            <div class="toolbar-list">
                <button id="reset" class="toolbar-btn btn btn-outline-secondary rounded-0 mx-1" title="reset" type="button">
                    <svg width="24" height="24" fill="currentColor" class="reset-btn" viewBox="0 0 16 16">
                        <path d="M11.534 7h3.932a.25.25 0 0 1 .192.41l-1.966 2.36a.25.25 0 0 1-.384 0l-1.966-2.36a.25.25 0 0 1 .192-.41m-11 2h3.932a.25.25 0 0 0 .192-.41L2.692 6.23a.25.25 0 0 0-.384 0L.342 8.59A.25.25 0 0 0 .534 9" />
                        <path fill-rule="evenodd" d="M8 3c-1.552 0-2.94.707-3.857 1.818a.5.5 0 1 1-.771-.636A6.002 6.002 0 0 1 13.917 7H12.9A5 5 0 0 0 8 3M3.1 9a5.002 5.002 0 0 0 8.757 2.182.5.5 0 1 1 .771.636A6.002 6.002 0 0 1 2.083 9z" />
                    </svg>
                </button>
                <button id="pan" class="toolbar-btn btn btn-outline-secondary rounded-0 mx-1" title="move" type="button">
                    <svg width="22" height="22" fill="currentColor" class="move-btn" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M7.646.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 1.707V5.5a.5.5 0 0 1-1 0V1.707L6.354 2.854a.5.5 0 1 1-.708-.708zM8 10a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L7.5 14.293V10.5A.5.5 0 0 1 8 10M.146 8.354a.5.5 0 0 1 0-.708l2-2a.5.5 0 1 1 .708.708L1.707 7.5H5.5a.5.5 0 0 1 0 1H1.707l1.147 1.146a.5.5 0 0 1-.708.708zM10 8a.5.5 0 0 1 .5-.5h3.793l-1.147-1.146a.5.5 0 0 1 .708-.708l2 2a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708-.708L14.293 8.5H10.5A.5.5 0 0 1 10 8" />
                    </svg>
                </button>
                <button id="invert" class="toolbar-btn btn btn-outline-secondary rounded-0 mx-1" title="invert" type="button">
                    <svg width="22" height="22" fill="currentColor" class="invert-btn" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 0 8 1zm0 1A8 8 0 1 1 8 0a8 8 0 0 1 0 16" />
                    </svg>
                </button>
                <button id="wwwc" class="toolbar-btn btn btn-outline-secondary rounded-0 mx-1" title="window level" type="button">
                    <svg width="22" height="22" fill="currentColor" class="wwwc-btn" viewBox="0 0 16 16">
                        <path d="M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8M8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0m0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13m8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5M3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8m10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0m-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0m9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707M4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708" />
                    </svg>
                </button>
                <button id="mpr" class="toolbar-btn btn btn-outline-secondary rounded-0 mx-1" style="font-size: 14px; font-weight: 600;" title="MPR" data-bs-toggle="modal" data-bs-target="#MprModal" type="button">
                    MPR
                </button>
                <button id="zoom" class="toolbar-btn btn btn-outline-secondary rounded-0 mx-1" title="zoom in/out" type="button">
                    <svg width="21" height="21" fill="currentColor" class="zoom-btn" viewBox="0 0 16 16">
                        <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                    </svg>
                </button>
                <button id="hFlip" class="toolbar-btn btn btn-outline-secondary rounded-0 mx-1" title="flip H" type="button">
                    <svg width="21" height="21" fill="currentColor" class="flipH-btn" viewBox="0 0 100 100">
                        <path d="M.002 73.945a3.5 3.5 0 0 0 2.05 3.098l31 14.072A3.5 3.5 0 0 0 38 87.925l-.05-75.857a3.5 3.5 0 0 0-5.58-2.812L4.474 29.869a3.5 3.5 0 0 0-1.41 2.555L.01 73.596a3.5 3.5 0 0 0-.008.35zm7.17-2.267l2.754-37.135l21.027-15.54l.043 63.491zM47.5 100h5V90h-5zm0-15h5V75h-5zm0-15h5V60h-5zm0-15h5V45h-5zm0-15h5V30h-5zm0-15h5V15h-5zm0-15h5V0h-5zM62 87.926a3.5 3.5 0 0 0 4.947 3.19l31-14.073a3.5 3.5 0 0 0 2.051-3.098a3.5 3.5 0 0 0-.008-.35l-3.054-41.171a3.5 3.5 0 0 0-1.41-2.555L67.63 9.256a3.5 3.5 0 0 0-5.58 2.812z" fill="#fff" />
                    </svg>
                </button>
                <button id="vFlip" class="toolbar-btn btn btn-outline-secondary rounded-0 mx-1" title="flip V" type="button">
                    <svg width="21" height="21" fill="currentColor" class="flipV-btn" viewBox="0 0 100 100">
                        <g fill="#fff">
                            <path d="M0 52.5h10v-5H0zm15 0h10v-5H15zm15 0h10v-5H30zm15 0h10v-5H45zm15 0h10v-5H60zm15 0h10v-5H75zm15 0h10v-5H90z"></path>
                            <path d="M26.055.002a3.5 3.5 0 0 0-3.098 2.05l-14.072 31A3.5 3.5 0 0 0 12.075 38l75.857-.05a3.5 3.5 0 0 0 2.812-5.58L70.131 4.474a3.5 3.5 0 0 0-2.555-1.41L26.404.01a3.5 3.5 0 0 0-.35-.008zm2.267 7.17l37.135 2.754l15.54 21.027l-63.491.043z"></path>
                            <path d="M12.074 62a3.5 3.5 0 0 0-3.19 4.947l14.073 31a3.5 3.5 0 0 0 3.098 2.051a3.5 3.5 0 0 0 .35-.008l41.171-3.054a3.5 3.5 0 0 0 2.555-1.41L90.744 67.63a3.5 3.5 0 0 0-2.812-5.58L12.074 62z"></path>
                        </g>
                    </svg>
                </button>
                <button id="lRotate" class="toolbar-btn btn btn-outline-secondary rounded-0 mx-1" title="rotate left" type="button">
                    <svg width="21" height="21" fill="currentColor" class="rotateLeft-btn" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2z" />
                        <path d="M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466" />
                    </svg>
                </button>
                <button id="rRotate" class="toolbar-btn btn btn-outline-secondary rounded-0 mx-1" title="rotate right" type="button">
                    <svg width="21" height="21" fill="currentColor" class="rotateRight-btn" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z" />
                        <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466" />
                    </svg>
                </button>
                <div class="toolbar-btn layout-container btn mx-1">
                    <button id="multiSeries" class="btn  rounded-0 toolbar-btn btn-outline-secondary" title="multi Series" type="button">
                        <svg width="24" height="24" fill="currentColor" class="multiSeries-btn" viewBox="0 0 256 256">
                            <path d="M120,48v64a7.9954,7.9954,0,0,1-8,8H48a7.99539,7.99539,0,0,1-8-8V48a7.99539,7.99539,0,0,1,8-8h64A7.9954,7.9954,0,0,1,120,48Zm88-8H144a7.99539,7.99539,0,0,0-8,8v64a7.99539,7.99539,0,0,0,8,8h64a7.9954,7.9954,0,0,0,8-8V48A7.9954,7.9954,0,0,0,208,40Zm-96,96H48a7.99539,7.99539,0,0,0-8,8v64a7.99539,7.99539,0,0,0,8,8h64a7.9954,7.9954,0,0,0,8-8V144A7.9954,7.9954,0,0,0,112,136Zm96,0H144a7.99539,7.99539,0,0,0-8,8v64a7.99539,7.99539,0,0,0,8,8h64a7.9954,7.9954,0,0,0,8-8V144A7.9954,7.9954,0,0,0,208,136Z" />
                        </svg>
                    </button>
                    <table class="layout-selector-table " style="direction: ltr;">
                        <tbody>
                            <tr>
                                <td title="1x1" onclick="splitScreen(1,1)" class="layout-item"></td>
                                <td title="1x2" onclick="splitScreen(1,2)" class="layout-item"></td>
                                <td title="1x3" onclick="splitScreen(1,3)" class="layout-item"></td>
                                <td title="1x4" onclick="splitScreen(1,4)" class="layout-item"></td>
                            </tr>
                            <tr>
                                <td title="2x1" onclick="splitScreen(2,1)" class="layout-item"></td>
                                <td title="2x2" onclick="splitScreen(2,2)" class="layout-item"></td>
                                <td title="2x3" onclick="splitScreen(2,3)" class="layout-item"></td>
                                <td title="2x4" onclick="splitScreen(2,4)" class="layout-item"></td>
                            </tr>
                            <tr>
                                <td title="3x1" onclick="splitScreen(3,1)" class="layout-item"></td>
                                <td title="3x2" onclick="splitScreen(3,2)" class="layout-item"></td>
                                <td title="3x3" onclick="splitScreen(3,3)" class="layout-item"></td>
                                <td title="3x4" onclick="splitScreen(3,4)" class="layout-item"></td>
                            </tr>
                            <tr>
                                <td title="4x1" onclick="splitScreen(4,1)" class="layout-item"></td>
                                <td title="4x2" onclick="splitScreen(4,2)" class="layout-item"></td>
                                <td title="4x3" onclick="splitScreen(4,3)" class="layout-item"></td>
                                <td title="4x4" onclick="splitScreen(4,4)" class="layout-item"></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <button id="downloadFile" class="toolbar-btn btn btn-outline-secondary rounded-0 mx-1" title="download file" type="button">
                    <svg width="21" height="21" fill="currentColor" class="downloadFile-btn" viewBox="0 0 16 16">
                        <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5" />
                        <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708z" />
                    </svg>
                </button>
                <button id="downloadZip" class="toolbar-btn btn btn-outline-secondary rounded-0 mx-1" title="download Zip folder" type="button">
                    <svg width="27" height="27" fill="#000" class="downloadZip-btn" viewBox="0 0 24 24">
                        <path d="M4 4C4 3.44772 4.44772 3 5 3H14H14.5858C14.851 3 15.1054 3.10536 15.2929 3.29289L19.7071 7.70711C19.8946 7.89464 20 8.149 20 8.41421V20C20 20.5523 19.5523 21 19 21H5C4.44772 21 4 20.5523 4 20V4Z" stroke="#fff" stroke-width="1.5" stroke-linecap="round" />
                        <path d="M20 8H15V3" stroke="#fff" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                        <path d="M7 13H9.5L7 17H9.5" stroke="#fff" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                        <path d="M12 13V17" stroke="#fff" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                        <path d="M15 17L15 15.5M15 15.5L15 13L15.75 13C16.4404 13 17 13.5596 17 14.25V14.25C17 14.9404 16.4404 15.5 15.75 15.5H15Z" stroke="#fff" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                </button>
            </div>
        </div>
        <div class="dicom-tumbnail">
            <div class="active tumbnail-item">
                <img id="item1" class="tumbnail-image" draggable="true" src="~/Content/Img/series/tmb/SR001.jpg" />
                <p class="tumbnail-serie"></p>
            </div>
            <div class="tumbnail-item">
                <img id="item2" class="tumbnail-image" draggable="true" src="~/Content/Img/series/tmb/SR004.jpg" />
                <p class="tumbnail-serie"></p>
            </div>
            <div class="tumbnail-item">
                <img class="tumbnail-image" draggable="true" src="~/Content/Img/series/tmb/SR005.jpg" />
                <p class="tumbnail-serie"></p>
            </div>
            <div class="tumbnail-item">
                <img class="tumbnail-image" draggable="true" src="~/Content/Img/series/tmb/SR006.jpg" />
                <p class="tumbnail-serie"></p>
            </div>
        </div>
        <div class="dicom-container" data-files="@ViewBag.Files">
            <div style="width:100%;height:100%;position:relative;color: white;display:flex;flex-wrap:wrap;border-style:solid;border-color:black;" oncontextmenu="return false" class="disable-selection noIbar" unselectable="on" onselectstart="return false;" onmousedown="return false;">
                <div id="dicomImage1" class="dicom-frame active" style="width:100%;height:100%;position:relative">
                    <div class="top-left-details text-white">
                        <span class="h3 fw-bold PatientName" id=""></span>
                        <span>
                            <span>ID: </span><span class="fw-bold PatientID" id=""></span>
                        </span>
                        <span>
                            <span>Age: </span><span class="fw-bold PatientAge" id=""></span>
                        </span>
                    </div>
                    <div class="bottom-left-details text-white">
                        <span>
                            <span>Thk: </span><span class="fw-bold Thk" id=""></span>
                        </span>
                        <span>
                            <span>Size: </span><span class="fw-bold rows" id=""></span>,<span class="fw-bold columns" id=""></span>
                        </span>
                        <span>
                            <span>Scale: </span><span class="fw-bold Scale" id=""></span>
                        </span>
                        <span>
                            <span>W: </span><span class="fw-bold WW" id=""></span>&nbsp;&nbsp;<span>L: </span><span class="fw-bold WL" id=""></span>
                        </span>
                    </div>
                    <div class="top-right-details text-white">
                        <span>
                            <span>Frame: </span><span class="fw-bold FrameNum" id=""></span>
                        </span>
                        <span>
                            <span>Date: </span><span class="fw-bold Date" id=""></span>
                        </span>
                        <span>
                            <span>Time: </span><span class="fw-bold Time" id=""></span>
                        </span>
                        <span class="fw-bold ImageType" id=""></span>
                    </div>
                    @*<div class="right-details">
                            <input class="range-slider" type="range" min="0" max="100" value="0" />
                        </div>*@
                    <div class="bottom-right-details text-white">
                        <span>
                            <span class="fw-bold InstitutionName" id=""></span>
                        </span>
                    </div>
                </div>
                @*second*@
                @for (int i = 2; i <= 16; i++)
                {
                    <div id="dicomImage@(i)" class="dicom-frame" style="width:50%;height:100%;position:relative;display:none">
                        <div class="top-left-details text-white">
                            <span class="h3 fw-bold PatientName" id=""></span>
                            <span>
                                <span>ID: </span><span class="fw-bold PatientID" id=""></span>
                            </span>
                            <span>
                                <span>Age: </span><span class="fw-bold PatientAge" id=""></span>
                            </span>
                        </div>
                        <div class="bottom-left-details text-white">
                            <span>
                                <span>Thk: </span><span class="fw-bold Thk" id=""></span>
                            </span>
                            <span>
                                <span>Size: </span><span class="fw-bold rows" id=""></span>,<span class="fw-bold columns" id=""></span>
                            </span>
                            <span>
                                <span>Scale: </span><span class="fw-bold Scale" id=""></span>
                            </span>
                            <span>
                                <span>W: </span><span class="fw-bold WW" id=""></span>&nbsp;&nbsp;<span>L: </span><span class="fw-bold WL" id=""></span>
                            </span>
                        </div>
                        <div class="top-right-details text-white">
                            <span>
                                <span>Frame: </span><span class="fw-bold FrameNum" id=""></span>
                            </span>
                            <span>
                                <span>Date: </span><span class="fw-bold Date" id=""></span>
                            </span>
                            <span>
                                <span>Time: </span><span class="fw-bold Time" id=""></span>
                            </span>
                            <span class="fw-bold ImageType" id=""></span>
                        </div>
                        @*<div class="right-details">
                                <input class="range-slider" type="range" min="0" max="100" value="0" />
                            </div>*@
                        <div class="bottom-right-details text-white">
                            <span>
                                <span class="fw-bold InstitutionName" id=""></span>
                            </span>
                        </div>
                    </div>
                }
            </div>


        </div>
        <script>

            //// Doing some dark magic here to make sure we don't add our
            //// synchronizer/tool until all canvases have rendered an image.
            //let canvasesReady = false;
            //let numImagesLoaded = 0;
            //let elementsSync = []
            //for (let i = 1; i <= 16; i++) {
            //    elementsSync.push(document.getElementById(`dicomImage${i}`))
            //}
            //const firstElement = document.getElementById('dicomImage1');
            //const secondElement = document.getElementById('dicomImage2');
            ////const thirdElement = document.getElementById('dicomImage3');

            //function addReferenceLinesTool() {
            //    const synchronizer = new cornerstoneTools.Synchronizer(
            //        'cornerstonenewimage',
            //        cornerstoneTools.updateImageSynchronizer
            //    );
            //    // These have to be added to our synchronizer before we pass it to our tool
            //    //synchronizer.add(firstElement);
            //    //synchronizer.add(secondElement);
            //    console.log(synchronizer)
            //    let activeElm = document.querySelector(".dicom-container .active")
            //    elementsSync.forEach(elm => synchronizer.add(elm))
            //    //elementsSync.forEach(elm => synchronizer.addSource(elm))
            //    synchronizer.removeSource(activeElm)
            //    cornerstoneTools.addTool(cornerstoneTools.ReferenceLinesTool);
            //    cornerstoneTools.setToolEnabled('ReferenceLines', {
            //        synchronizationContext: synchronizer,
            //    });
            //}

            //const handleImageRendered = (evt) => {
            //    evt.detail.element.removeEventListener('cornerstoneimagerendered', handleImageRendered)
            //    numImagesLoaded++;
            //    if (numImagesLoaded == 2) {
            //        addReferenceLinesTool();
            //    }
            //}
            ////firstElement.addEventListener('cornerstoneimagerendered', handleImageRendered)
            ////secondElement.addEventListener('cornerstoneimagerendered', handleImageRendered)
            ////thirdElement.addEventListener('cornerstoneimagerendered', handleImageRendered)
            //elementsSync.forEach(elm => cornerstone.enable(elm))
            //elementsSync.forEach(elm => elm.addEventListener("cornerstoneimagerendered", handleImageRendered))



        </script>
    </div>
    <script>
        // Externals
        cornerstoneWADOImageLoader.external.cornerstone = cornerstone;
        cornerstoneWADOImageLoader.external.dicomParser = dicomParser;
        cornerstoneTools.external.cornerstoneMath = cornerstoneMath;
        cornerstoneTools.external.cornerstone = cornerstone;
        cornerstoneTools.external.Hammer = Hammer;
        let FileArray = []
        let Files1 = JSON.parse(document.querySelector(".dicom-container").dataset.files)
        let FileObject1 = {
            name: "SR001",
            list: Files1
        }
        FileArray.push(FileObject1)
        let Files2 = []
        let elements = []
        for (let i = 1; i <= 16; i++) {
            elements.push(document.getElementById(`dicomImage${i}`))
        }
        let element1 = elements[0]
        let element2 = elements[1]

        let path1 = document.getElementById("item1").src
        let path2
        path1 = path1.replace(".jpg", "/").replace("/tmb", "")
        cornerstoneTools.init({ globalToolSyncEnabled: true })

        //test
        let synchronizer = new cornerstoneTools.Synchronizer(
            'cornerstonenewimage',
            cornerstoneTools.updateImageSynchronizer
        );
        cornerstoneTools.addTool(cornerstoneTools.ReferenceLinesTool);
        cornerstoneTools.setToolEnabled('ReferenceLines', {
            synchronizationContext: synchronizer,
        });

        const toolName = 'StackScrollMouseWheel';
        let imageIdsStack = [];
        let imageIdsStack2 = [];

        for (let i = 0; i < Files1.length; i++) {
            imageIdsStack.push('wadouri:' + path1 + Files1[i]);
        }

        let firstStack = {
            currentImageIdIndex: 0,
            imageIds: imageIdsStack,
        };
        let secondStack = {
            currentImageIdIndex: 0,
            imageIds: []
        }

        // Add and activate tools
        cornerstoneTools.addTool(cornerstoneTools.StackScrollTool);
        cornerstoneTools.addTool(cornerstoneTools.StackScrollMouseWheelTool);
        cornerstoneTools.setToolActive('StackScroll', { mouseButtonMask: 1 });
        cornerstoneTools.setToolActive('StackScrollMouseWheel', {});

        loadSeries(cornerstone, imageIdsStack, element1, firstStack);
        cornerstone.enable(element1);

        function loadSeries(cornerstone, imageIds, element, stack) {

            // Cache all images and metadata
            imageIds.forEach(imageId => cornerstone.loadAndCacheImage(imageId));
            // Load and display first image in stack
            return cornerstone.loadImage(imageIds[0]).then(image => {
                // display this image
                cornerstone.displayImage(element, image);

                // set the stack as tool state
                cornerstoneTools.addStackStateManager(element, ['stack', toolName]);
                cornerstoneTools.addToolState(element, 'stack', stack);
                function onImageRendered(e) {
                    const eventData = e.detail;
                    element.dataset.id = imageIds.indexOf(eventData.image.imageId)
                    // set the canvas context to the image coordinate system
                    cornerstone.setToPixelCoordinateSystem(eventData.enabledElement, eventData.canvasContext);
                    //document.getElementById('topright').textContent = "Render Time:" + eventData.renderTimeInMs + " ms";
                    element.querySelector('.WW').textContent = Math.round(eventData.viewport.voi.windowWidth);
                    element.querySelector('.WL').textContent = Math.round(eventData.viewport.voi.windowCenter);
                    element.querySelector('.Scale').textContent = + eventData.viewport.scale.toFixed(2);
                    element.querySelector(".FrameNum").textContent = `${imageIds.indexOf(eventData.image.imageId) + 1} / ${imageIds.length}`
                }

                element.addEventListener('cornerstoneimagerendered', onImageRendered);
                let dateUnFormated = image.data.string('x00080012')
                let dateFormated = `${dateUnFormated.slice(0, 4)}/${dateUnFormated.slice(4, 6)}/${dateUnFormated.slice(6, 8)}`
                element.querySelector('.Date').textContent = dateFormated;
                element.querySelector('.Time').textContent = image.data.string('x00080013');
                element.querySelector('.ImageType').textContent = image.data.string('x00280008');
                element.querySelector('.InstitutionName').textContent = image.data.string('x00080080');
                element.querySelector('.PatientName').textContent = image.data.string('x00100010').replace("^", " ");
                element.querySelector('.PatientID').textContent = image.data.string('x00100020');
                element.querySelector('.PatientAge').textContent = image.data.string('x00101010');
                element.querySelector('.Thk').textContent = image.data.string('x00180050').concat("mm");
                element.querySelector('.rows').textContent = image.data.uint16('x00280010');
                element.querySelector('.columns').textContent = image.data.uint16('x00280011');
                /*element.querySelector(".FrameNum").textContent = `${indexOfImage} / ${imageIds.length}`*/
                //element.querySelector(".FrameNum").textContent = image.data.string("x00081160")
            });
        }


        cornerstone.events.addEventListener('cornerstoneimageloadprogress', function (event) {
            const eventData = event.detail;
            const loadProgress = document.querySelector('.loadProgress');
            loadProgress.textContent = `Image Load Progress: ${eventData.percentComplete}%`;
        });
        //on wheel active
        elements.forEach(elem => {
            elem.addEventListener("wheel", function (event) {
                event.preventDefault()
                event.stopPropagation()
                let serie = this.dataset.folder
                document.querySelectorAll(".tumbnail-image").forEach(image => {
                    image.parentNode.classList.remove("active")
                    if (image.src.replace(".jpg", "").split("/").pop() == serie) {
                        image.parentNode.classList.add("active")
                    }
                })
                elements.forEach(item => item.classList.remove("active"))
                elem.classList.add("active")
                elements.forEach(item => synchronizer.removeSource(item))
                synchronizer.addSource(elem)
            })
        })

        //on click active
        elements.forEach(elem => {
            elem.addEventListener("click", function (event) {
                event.preventDefault()
                event.stopPropagation()
                let serie = this.dataset.folder
                document.querySelectorAll(".tumbnail-image").forEach(image => {
                    image.parentNode.classList.remove("active")
                    if (image.src.replace(".jpg", "").split("/").pop() == serie) {
                        image.parentNode.classList.add("active")
                    }
                })
                elements.forEach(item => item.classList.remove("active"))
                elem.classList.add("active")
                elements.forEach(item => synchronizer.removeSource(item))
                synchronizer.addSource(elem)
            })
        })

    </script>
    <script>
        $(document).ready(function () {
            $(".tumbnail-image").on("click", function () {
                let activeDicom = $(".dicom-container .active")
                if ($(this).parent().is(".active")) return
                $(".tumbnail-item").removeClass("active")
                $(this).parent().addClass("active")
                let imageSrc = $(this).prop("src")
                let path = imageSrc.replace(".jpg", "/").replace("/tmb", "")
                let folderOfDicom = imageSrc.replace(".jpg", "")
                folderOfDicom = folderOfDicom.split("/").pop()
                let existFile = FileArray.find(file => file.name === folderOfDicom) ?? null
                if (existFile != null) {
                    activeDicom.attr("data-folder", folderOfDicom)
                    let FileOfStack = existFile.list
                    let imageIdsStack = []
                    for (let i = 0; i < FileOfStack.length; i++) {
                        imageIdsStack.push('wadouri:' + path + FileOfStack[i]);
                    }
                    let currentStack = {
                        currentImageIdIndex: 0,
                        imageIds: imageIdsStack
                    }
                    loadSeries(cornerstone, imageIdsStack, activeDicom[0], currentStack);
                } else {
                    $.ajax({
                        method: "POST",
                        url: "@Url.Action("Dicom")",
                        data: {
                            folderOfDicom : folderOfDicom
                        },
                        success: function (response) {
                            if (response.successMsg) {
                                activeDicom.attr("data-folder", folderOfDicom)
                                let FileOfStack = JSON.parse(response.successMsg)
                                let fileDetail = {
                                    name: folderOfDicom,
                                    list: FileOfStack
                                }
                                addUniqueFile(fileDetail)
                                let imageIdsStack = []
                                for (let i = 0; i < FileOfStack.length; i++) {
                                    imageIdsStack.push('wadouri:' + path + FileOfStack[i]);
                                }
                                let currentStack = {
                                    currentImageIdIndex: 0,
                                    imageIds: imageIdsStack
                                }
                                loadSeries(cornerstone, imageIdsStack, activeDicom[0], currentStack);
                            } else {
                                alert(response.errorMsg)
                            }
                        }
                    })
                }
            })


             $("#multiSeries").on("click", function () {
                $(this).toggleClass("active")
                if ($(this).is(".active")) {
                    $(".layout-selector-table").css("display" , "flex")
                } else {
                    $(".layout-selector-table").css("display", "none")
                 }

             })
        })

        //download a file with frame number and series name
        $("#downloadFile").on("click", function () {
            let activeDicom = $(".dicom-container .active")
            let serie = activeDicom.attr("data-folder")
            let frameNum = activeDicom.find(".FrameNum").text().split(" ")[0]
            frameNum = parseInt(frameNum)
            let activeFile = FileArray.find(file => file.name === serie)
            window.location = window.location.origin + "/Content/Img/series/" + serie + "/" + activeFile.list[frameNum -1]
        })
        //download the zip file of series folder
        $("#downloadZip").on("click", function () {
            let activeDicom = $(".dicom-container .active")
            let serie = activeDicom.attr("data-folder")
            $.ajax({
                method: "POST",
                url: "@Url.Action("DownloadZip")",
                data: {
                    folderOfDicom : serie
                },
                xhrFields: {
                    responseType: 'blob'
                },
                success: function (response) {
                    var blob = new Blob([response], { type: 'application/zip' });
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(blob);
                    link.download = serie + ".zip";
                    link.click();
                }
            })
        })


        //adding label to tumbnail items
        $(".tumbnail-image").each(function (id) {
            let src = $(this).prop("src")
            src = src.replace(".jpg", "").split("/").pop()
            if ($(".tumbnail-image")[id] == $(".tumbnail-image")[0]) {
                //$(".tumbnail-image")[id].dataset.folder = src
                $(`#dicomImage${id+1}`).attr("data-folder" , src)
            }
            $(this).next(".tumbnail-serie").text(src)
        })

        //hover color of table selector
        $(".layout-selector-table td").hover(function (event) {
            event.stopPropagation()
            var $this = $(this);
            var cellIndex = $this.index();
            var rowIndex = $this.parent().index();

            // Highlight cells in the same row up to the current cell
            $this.parent().find('td').slice(0, cellIndex + 1).addClass('hovered');

            // Highlight cells in the same column up to the current row
            $('.layout-selector-table tr').each(function (index) {
                if (index <= rowIndex) {
                    $(this).find('td').slice(0, cellIndex + 1).addClass('hovered');
                }
            });
        }, function () {
                // Optional: remove hover class when mouse leaves the cell
            $('.layout-selector-table td').removeClass('hovered');
        }
        )
        //for dividing screen to what we want
        function splitScreen(row, col) {
            //test
            synchronizer.destroy()
            let dicomFrameCount = row * col
            $(".layout-selector-table").css("display", "none")
            $("#multiSeries").removeClass("active")
            $(".dicom-frame").hide()
            $(".dicom-frame").css("width", `${100 / col}%`)
            $(".dicom-frame").css("height", `${100 / row}%`)
            for (let cell = 1; cell <= dicomFrameCount; cell++) {
                $(`#dicomImage${cell}`).css("display", "flex")
                cornerstone.resize(element1)
                //if (dicomFrameCount <= 4) {
                    let imageSrc = $(`.tumbnail-item:nth-of-type(${cell})`).find("img").prop("src")
                    let path = imageSrc.replace(".jpg", "/").replace("/tmb", "")
                    console.log(imageSrc)
                    let folderOfDicom = imageSrc.replace(".jpg", "")
                    folderOfDicom = folderOfDicom.split("/").pop()
                    $(`#dicomImage${cell}`).attr("data-folder", folderOfDicom)
                    $.ajax({
                        method: "POST",
                        url: "@Url.Action("Dicom")",
                        data: {
                            folderOfDicom : folderOfDicom
                        },
                        success: function (response) {
                            if (response.successMsg) {
                                let FileOfStack = JSON.parse(response.successMsg)
                                let fileDetail = {
                                    name: folderOfDicom,
                                    list : FileOfStack
                                }
                                addUniqueFile(fileDetail)
                                let imageIdsStack = []
                                for (let i = 0; i < FileOfStack.length; i++) {
                                    imageIdsStack.push('wadouri:' + path + FileOfStack[i]);
                                }
                                let currentStack = {
                                    currentImageIdIndex: 0,
                                    imageIds: imageIdsStack
                                }
                                loadSeries(cornerstone, imageIdsStack, elements[cell-1], currentStack);
                                cornerstone.enable(elements[cell - 1])
                                //test
                                synchronizer.add(elements[cell - 1])
                                cornerstone.resize(elements[cell - 1])
                                    synchronizer.removeSource(elements[cell - 1])
                            } else {
                                alert(response.errorMsg)
                            }
                        }
                    })
                //}

            }
            ////test
            //elements.forEach(item => synchronizer.removeSource(item))
            //synchronizer.addSource(".dicom-container .active")
        }

        function addUniqueFile(newobj) {
            if (!FileArray.some(obj => obj.name === newobj.name)) {
                FileArray.push(newobj)
            }
        }
    </script>


    @*<script>
            cornerstoneWADOImageLoader.external.cornerstone = cornerstone;

            const element1 = document.getElementById('dicomImage');
            element1.setAttribute("data-folder", "SR001")
            const element2 = document.getElementById('dicomImage2');
            let Files = JSON.parse(document.querySelector(".dicom-container").dataset.files)
            let Files2 = []
            let path1 = document.querySelector("#item1").src
            let imageId = changePathToImageID(path1)
            console.log(path1)
            let baseUrl = document.querySelector(".dicom-container").dataset.baseurl
            let loaded = false;
            //let imageId = "wadouri:" + window.location.origin + "/" + path;
            /*  let imageId = "wadouri:" + path1;*/
            console.log(imageId)
            loadAndViewImage(imageId, element1)

            // Init CornerstoneTools

            function loadAndViewImage(imageId, element) {
                //const element = document.getElementById('dicomImage');
                cornerstone.loadAndCacheImage(imageId).then(function (image) {
                    console.log(image);
                    const viewport = cornerstone.getDefaultViewportForImage(element, image);
                    cornerstone.displayImage(element, image, viewport);
                    if (loaded === false) {
                        //cornerstoneTools.init({
                        //    globalToolSyncEnabled: true,
                        //});
                        cornerstoneTools.mouseInput.enable(element);
                        cornerstoneTools.mouseWheelInput.enable(element);
                        //cornerstoneTools.wwwc.activate(element, 1); // ww/wc is the default tool for left mouse button
                        //cornerstoneTools.pan.activate(element, 2); // pan is the default tool for middle mouse button
                        //cornerstoneTools.zoom.activate(element, 4); // zoom is the default tool for right mouse button
                        //cornerstoneTools.zoomWheel.activate(element); // zoom is the default tool for middle mouse wheel

                        //cornerstoneTools.imageStats.enable(element);
                        loaded = true;
                    }

                    function onImageRendered(e) {
                        const eventData = e.detail;
                        // set the canvas context to the image coordinate system
                        cornerstone.setToPixelCoordinateSystem(eventData.enabledElement, eventData.canvasContext);
                        //document.getElementById('topright').textContent = "Render Time:" + eventData.renderTimeInMs + " ms";
                        element.querySelector('.WW').textContent = Math.round(eventData.viewport.voi.windowWidth);
                        element.querySelector('.WL').textContent = Math.round(eventData.viewport.voi.windowCenter);
                        element.querySelector('.Scale').textContent = + eventData.viewport.scale.toFixed(2);

                    }
                    element.addEventListener('cornerstoneimagerendered', onImageRendered);

                    let dateUnFormated = image.data.string('x00080012')
                    let dateFormated = `${dateUnFormated.slice(0, 4)}/${dateUnFormated.slice(4, 6)}/${dateUnFormated.slice(6, 8)}`
                    element.querySelector('.Date').textContent = dateFormated;
                    element.querySelector('.Time').textContent = image.data.string('x00080013');
                    element.querySelector('.ImageType').textContent = image.data.string('x00280008');
                    element.querySelector('.InstitutionName').textContent = image.data.string('x00080080');
                    element.querySelector('.PatientName').textContent = image.data.string('x00100010').replace("^", " ");
                    element.querySelector('.PatientID').textContent = image.data.string('x00100020');
                    element.querySelector('.PatientAge').textContent = image.data.string('x00101010');
                    element.querySelector('.Thk').textContent = image.data.string('x00180050').concat("mm");
                    element.querySelector('.rows').textContent = image.data.uint16('x00280010');
                    element.querySelector('.columns').textContent = image.data.uint16('x00280011');
                    if (element == element1) {
                        element.querySelector('.FrameNum').textContent = `${getCurrentIndex(path1, Files) + 1} / ${Files.length}`
                    } else {
                        element.querySelector('.FrameNum').textContent = `${getCurrentIndex(path2, Files2) + 1} / ${Files2.length}`
                    }
                }, function (err) {
                    alert(err);
                });
            }
            //Add event handlers to specific dicom image
            let selectedElm = element1
            document.querySelectorAll(".dicom-frame").forEach(function (elm) {
                elm.addEventListener("click", function (event) {
                    event.preventDefault()
                    if (!elm.classList.contains("active")) {
                        document.querySelectorAll(".dicom-frame").forEach(elm => elm.classList.remove("active"))
                        elm.classList.add("active")
                    }
                    selectedElm = elm
                    document.querySelectorAll(".tumbnail-image").forEach(function (image) {
                        image.parentNode.classList.remove("active")
                        let folderOfDicom = image.src.replace(".jpg", "")
                        folderOfDicom = folderOfDicom.split("/").pop()
                        console.log(elm.getAttribute("data-folder"))
                        if (folderOfDicom == elm.getAttribute("data-folder")) {
                            image.parentNode.classList.add("active")
                        }
                    })
                    cornerstoneTools.mouseInput.enable(selectedElm);
                    cornerstoneTools.mouseWheelInput.enable(selectedElm);
                })
            })

            // Add event handlers to flip or rotate the image

            document.getElementById('pan').addEventListener('click', function (e) {
                this.classList.toggle("active")
                if (this.classList.contains('active')) {
                    cornerstoneTools.pan.activate(selectedElm, 1);
                } else {
                    cornerstoneTools.pan.deactivate(selectedElm, 1);
                }
            });
            document.getElementById('invert').addEventListener('click', function (e) {
                this.classList.toggle("active")
                const viewport = cornerstone.getViewport(selectedElm);
                viewport.invert = !viewport.invert;
                cornerstone.setViewport(selectedElm, viewport);
            });
            document.getElementById('hFlip').addEventListener('click', function (e) {
                this.classList.toggle("active")
                const viewport = cornerstone.getViewport(selectedElm);
                viewport.hflip = !viewport.hflip;
                cornerstone.setViewport(selectedElm, viewport);
            });

            document.getElementById('vFlip').addEventListener('click', function (e) {
                this.classList.toggle("active")
                const viewport = cornerstone.getViewport(selectedElm);
                viewport.vflip = !viewport.vflip;
                cornerstone.setViewport(selectedElm, viewport);
            });

            document.getElementById('lRotate').addEventListener('click', function (e) {
                const viewport = cornerstone.getViewport(selectedElm);
                viewport.rotation -= 90;
                cornerstone.setViewport(selectedElm, viewport);
            });

            document.getElementById('rRotate').addEventListener('click', function (e) {
                const viewport = cornerstone.getViewport(selectedElm);
                viewport.rotation += 90;
                cornerstone.setViewport(selectedElm, viewport);
            });
            // Add event handlers to zoom the image in and out
            document.getElementById('zoom').addEventListener('click', function (e) {
                this.classList.toggle("active")
                this.classList.toggle('is-active')
                if (this.classList.contains('is-active')) {
                    cornerstoneTools.zoom.activate(selectedElm, 1); // zoom is the default tool for right mouse button
                    cornerstoneTools.zoomWheel.activate(selectedElm); // zoom is the default tool for middle mouse wheel
                } else {
                    cornerstoneTools.zoom.deactivate(selectedElm, 1); // zoom is the default tool for right mouse button
                    cornerstoneTools.zoomWheel.deactivate(selectedElm); // zoom is the default tool for middle mouse wheel
                }
                //const viewport = cornerstone.getViewport(element1);
                //viewport.scale += 0.25;
                //cornerstone.setViewport(element1, viewport);
            });
            document.getElementById('wwwc').addEventListener('click', function (e) {
                this.classList.toggle("active")
                this.classList.toggle('is-active')
                if (this.classList.contains('is-active')) {
                    cornerstoneTools.wwwc.activate(selectedElm, 1); // ww/wc is the default tool for left mouse button
                } else {
                    cornerstoneTools.wwwc.deactivate(selectedElm, 1); // ww/wc is the default tool for left mouse button
                }
            });


            document.getElementById('reset').addEventListener('click', function (e) {
                cornerstone.reset(selectedElm);
            });


            cornerstone.enable(selectedElm);


            let StaticPath
            function getCurrentIndex(path, file) {
                let currentSrc = path.split('/').pop(); // Extract filename from src
                StaticPath = path.replace(currentSrc, "")
                return file.indexOf(currentSrc);
            }

            // Function to update the image source
            function updateImage(index, path, file) {
                if (index >= 0 && index < file.length) {
                    if (path == path1) {
                        path1 = StaticPath + file[index]
                        imageId = "wadouri:" + path1;
                        loadAndViewImage(imageId, selectedElm)
                    } else {
                        path2 = StaticPath + file[index]
                        let imageId2 = "wadouri:" + path2;
                        loadAndViewImage(imageId2, selectedElm)
                    }
                }
            }
            let rangeSlider = element1.querySelector(".range-slider")
            let rangeSlider2 = element2.querySelector(".range-slider")
            let step = 100 / (Files.length - 1)
            let step2 = 100 / (Files2.length - 1)
            rangeSlider.step = step
            rangeSlider2.step = step2
            element1.addEventListener("wheel", function (event) {
                if (element1.classList.contains("active") == false) return
                event.preventDefault()
                let currentValue = parseFloat(rangeSlider.value);
                let currentIndex = getCurrentIndex(path1, Files);
                if (event.deltaY < 0) {
                    //scrolling up
                    currentIndex--
                    if (rangeSlider.value > 0) {
                        rangeSlider.value = currentValue - step
                    }
                } else if (event.deltaY > 0) {
                    //scrolling down
                    currentIndex++
                    if (rangeSlider.value < 100) {
                        rangeSlider.value = currentValue + step
                    }
                }
                // Ensure the value remains within bounds (0 to 100)
                if (rangeSlider.value < 0) {
                    rangeSlider.value = 0;
                } else if (rangeSlider.value > 100) {
                    rangeSlider.value = 100;
                }
                updateImage(currentIndex, path1, Files)
            })
            element2.addEventListener("wheel", function (event) {
                if (element2.classList.contains("active") == false) return
                event.preventDefault()
                let currentValue = parseFloat(rangeSlider2.value);
                let currentIndex = getCurrentIndex(path2, Files2);
                if (event.deltaY < 0) {
                    //scrolling up
                    currentIndex--
                    if (rangeSlider2.value > 0) {
                        rangeSlider2.value = currentValue - step2
                    }
                } else if (event.deltaY > 0) {
                    //scrolling down
                    currentIndex++
                    if (rangeSlider2.value < 100) {
                        rangeSlider2.value = currentValue + step2
                    }
                }
                // Ensure the value remains within bounds (0 to 100)
                if (rangeSlider2.value < 0) {
                    rangeSlider2.value = 0;
                } else if (rangeSlider2.value > 100) {
                    rangeSlider2.value = 100;
                }
                updateImage(currentIndex, path2, Files2)
            })

            rangeSlider.addEventListener("input", function () {
                let indexOfFiles = Math.floor(this.value / step)
                updateImage(indexOfFiles, path1, Files)
            })
            rangeSlider2.addEventListener("input", function () {
                let indexOfFiles = Math.floor(this.value / step2)
                updateImage(indexOfFiles, path2, Files2)
            })
            function changePathToImageID(path) {
                path = path.replace(".jpg", "/")
                path = path.replace("/tmb", "")
                path1 = path.concat(Files[0])
                let Id = "wadouri:" + path1;
                return Id
            }

            cornerstone.events.addEventListener('cornerstoneimageloadprogress', function (event) {
                const eventData = event.detail;
                const loadProgress = document.querySelector('.loadProgress');
                loadProgress.textContent = `Image Load Progress: ${eventData.percentComplete}%`;
            });
        </script>
        <script>
            $(document).ready(function () {
                $(".tumbnail-image").on("click", function () {
                    if ($(this).parent().is(".active")) return
                    $(".tumbnail-item").removeClass("active")
                    $(this).parent().addClass("active")
                    let imageSrc1 = $(this).prop("src")
                    getDataFromAction(imageSrc1)
                })

                $("#multiSeries").on("click", function () {
                    $(this).toggleClass("active")
                    //let image = cornerstone.getImage($("#dicomImage"))
                    if ($(this).is(".active")) {
                        $("#dicomImage").css("width", "50%")
                        cornerstone.resize(element1, true)
                        $("#dicomImage2").show()
                        //Ajax
                        $(this).parent().addClass("active")
                        let imageSrc = $(".tumbnail-item:nth-of-type(2)").find("img").prop("src")
                        console.log(imageSrc)
                        let folderOfDicom = imageSrc.replace(".jpg", "")
                        folderOfDicom = folderOfDicom.split("/").pop()
                        $("#dicomImage2").attr("data-folder", folderOfDicom)
                        $.ajax({
                            method: "POST",
                            url: "@Url.Action("Dicom")",
                            data: {
                                    folderOfDicom : folderOfDicom
                            },
                            success: function (response) {
                            if (response.successMsg) {
                            Files2 = JSON.parse(response.successMsg)
                                step2 = 100 / (Files2.length - 1)
                                rangeSlider2.step = step2
                                imageSrc = imageSrc.replace(".jpg", "/")
                                imageSrc = imageSrc.replace("/tmb", "")
                                path2 = imageSrc.concat(Files2[0])
                                let imageId2 = "wadouri:" + path2;

                                loadAndViewImage(imageId2, element2)
                                cornerstone.enable(element2);
                            } else {
                                alert(response.errorMsg)
                            }
                            }
                        })
                    } else {
                        $("#dicomImage").css("width", "100%")
                        $("#dicomImage2").hide()
                        cornerstone.resize(element1, true)
                    }

                })


                //adding label to tumbnail items
                $(".tumbnail-image").each(function () {
                    let src = $(this).prop("src")
                    src = src.replace(".jpg", "").split("/").pop()
                    $(this).next(".tumbnail-serie").text(src)
                })



                //dragable images to view
                $(".tumbnail-image").on("dragstart", function (event) {
                    event.originalEvent.stopPropagation()
                    event.originalEvent.dataTransfer.setData("text", event.target.src)
                })
                $("#dicomImage").on("dragover", function (event) {
                    event.originalEvent.stopPropagation()
                    event.originalEvent.preventDefault()
                })
                $("#dicomImage").on("drop", function (event) {
                    event.originalEvent.stopPropagation()
                    let data = event.originalEvent.dataTransfer.getData("text")
                    getDataFromAction(data)
                    $(".tumbnail-item").each(function () {
                        $(this).removeClass("active")
                        if ($(this).children().first().prop("src") == data) {
                            $(this).addClass("active")
                        }
                    })
                })
                $("#dicomImage2").on("dragover", function (event) {
                    event.originalEvent.stopPropagation()
                    event.originalEvent.preventDefault()
                })
                $("#dicomImage2").on("drop", function (event) {
                    event.originalEvent.stopPropagation()
                    let data = event.originalEvent.dataTransfer.getData("text")
                    getDataFromAction(data)
                        $(".tumbnail-item").each(function () {
                            $(this).removeClass("active")
                            if ($(this).children().first().prop("src") == data) {
                                $(this).addClass("active")
                            }
                        })
                })

                function getDataFromAction(imageSrc) {
                     let folderOfDicom = imageSrc.replace(".jpg", "")
                     folderOfDicom = folderOfDicom.split("/").pop()
                     $.ajax({
                        method: "POST",
                        url: "@Url.Action("Dicom")",
                        data: {
                            folderOfDicom : folderOfDicom
                        },
                        success: function (response) {
                            if (response.successMsg) {
                                if (selectedElm == element1) {
                                    rangeSlider.value = 0
                                    $("#dicomImage").attr("data-folder" , folderOfDicom)
                                    Files = JSON.parse(response.successMsg)
                                    step = 100 / (Files.length - 1)
                                    path1 = imageSrc
                                    let ImageID = changePathToImageID(path1)
                                    loadAndViewImage(ImageID, element1)
                                } else {
                                    rangeSlider2.value = 0
                                    $("#dicomImage2").attr("data-folder", folderOfDicom)
                                    Files2 = JSON.parse(response.successMsg)
                                    step2 = 100 / (Files2.length - 1)
                                    imageSrc = imageSrc.replace(".jpg", "/")
                                    imageSrc = imageSrc.replace("/tmb", "")
                                    path2 = imageSrc.concat(Files2[0])
                                    let imageId2 = "wadouri:" + path2;
                                    loadAndViewImage(imageId2, element2)
                                }
                                rangeSlider.step = step
                            }else {
                                alert(response.errorMsg)
                             }
                        }
                      })
                }

            })
        </script>*@
</body>
</html>
