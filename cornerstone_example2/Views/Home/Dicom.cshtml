@using System.IO
@{ 
    string file = File.ReadAllText(Server.MapPath("~/Content/Img/dicom/sample_dcm.dcm"));

}
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Dicom</title>
    <link rel="stylesheet" href="~/Content/Css/bootstrap.css" />
    <link rel="stylesheet" href="~/Content/Css/Dicom.css" />
    <script src="~/Scripts/cornerstone-prev.js"></script>
    <script src="~/Scripts/cornerstone-math.js"></script>
    <script src="~/Scripts/cornerstone-tools.js"></script>
    <script src="~/Scripts/dicom-parser.js"></script>
    <script src="~/Scripts/cornerstone-wado-image-loader@4.13.2.js"></script>
    <script src="~/Scripts/initializeWebWorkers.js"></script>
</head>
<body>
    <div class="dicom">
        <div class="dicom-container">
            <div style="width:512px;height:512px;position:relative;color: white;display:inline-block;border-style:solid;border-color:black;" oncontextmenu="return false" class="disable-selection noIbar" unselectable="on" onselectstart="return false;" onmousedown="return false;">
                <div id="dicomImage" style="width:512px;height:512px;top:0px;left:0px; position:absolute"> </div>
            </div>
        </div>
        <div class="dicom-tumbnail">
            <button type="button" class="imgbtn">click</button>
            <input class="w-100" id="selectFile" type="file"  />
        </div>
    </div>
    <script>

        cornerstoneWADOImageLoader.external.cornerstone = cornerstone;

        //// this function gets called once the user drops the file onto the div
        //function handleFileSelect(evt) {
        //    evt.stopPropagation();
        //    evt.preventDefault();

        //    // Get the FileList object that contains the list of files that were dropped
        //    const files = evt.dataTransfer.files;

        //    // this UI is only built for a single file so just dump the first one
        //    file = files[0];
        //    const imageId = cornerstoneWADOImageLoader.wadouri.fileManager.add(file);
        //    loadAndViewImage(imageId);
        //}

        //function handleDragOver(evt) {
        //    evt.stopPropagation();
        //    evt.preventDefault();
        //    evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
        //}

        //// Setup the dnd listeners.
        //const dropZone = document.getElementById('dicomImage');
        //dropZone.addEventListener('dragover', handleDragOver, false);
        //dropZone.addEventListener('drop', handleFileSelect, false);


        //cornerstoneWADOImageLoader.configure({
        //    beforeSend: function (xhr) {
        //        // Add custom headers here (e.g. auth tokens)
        //        //xhr.setRequestHeader('x-auth-token', 'my auth token');
        //    },
        //});

        let loaded = false;
        //let imageId = "wadouri:" + 'https://raw.githubusercontent.com/cornerstonejs/cornerstoneWADOImageLoader/master/testImages/' + 'CT2_J2KR'
        let imageId ="wadouri:" + window.location.origin + "/Content/Img/dicom/sample1.DCM";
        //let imageId ="wadouri:" + window.location.origin + "/Content/Img/scan-me.zip";
        ////const imageId = cornerstoneWADOImageLoader.wadouri.fileManager.add();
        ////let imageId ="wadouri:" + Server.MapPath("~/Content/Img/dicom/sample_dcm.dcm");
        //let imageId = 'dicomfile:1';
        ////let imagee = Server.MapPath("~/Content/Img/dicom/sample_dcm.dcm");
        //console.log(imagee)
        //loadAndViewImage(imageId)
        //setTimeout(function(){
        //    Download(window.location.origin + "/Content/Img/dicom/sample_dcm.dcm")
        //},1000)
        //function Download(url) {
        //    location.href = url;
        //}

        function loadAndViewImage(imageId) {
            const element = document.getElementById('dicomImage');
            const start = new Date().getTime();
            cornerstone.loadImage(imageId).then(function (image) {
                console.log(image);
                const viewport = cornerstone.getDefaultViewportForImage(element, image);
                //document.getElementById('toggleModalityLUT').checked = (viewport.modalityLUT !== undefined);
                //document.getElementById('toggleVOILUT').checked = (viewport.voiLUT !== undefined);
                cornerstone.displayImage(element, image, viewport);
                if (loaded === false) {
                    cornerstoneTools.mouseInput.enable(element);
                    cornerstoneTools.mouseWheelInput.enable(element);
                    cornerstoneTools.wwwc.activate(element, 1); // ww/wc is the default tool for left mouse button
                    cornerstoneTools.pan.activate(element, 2); // pan is the default tool for middle mouse button
                    cornerstoneTools.zoom.activate(element, 4); // zoom is the default tool for right mouse button
                    cornerstoneTools.zoomWheel.activate(element); // zoom is the default tool for middle mouse wheel

                    cornerstoneTools.imageStats.enable(element);
                    loaded = true;
                }

                function getTransferSyntax() {
                    const value = image.data.string('x00020010');
                    return value + ' [' + uids[value] + ']';
                }

                function getSopClass() {
                    const value = image.data.string('x00080016');
                    return value + ' [' + uids[value] + ']';
                }

                function getPixelRepresentation() {
                    const value = image.data.uint16('x00280103');
                    if (value === undefined) {
                        return;
                    }
                    return value + (value === 0 ? ' (unsigned)' : ' (signed)');
                }

                function getPlanarConfiguration() {
                    const value = image.data.uint16('x00280006');
                    if (value === undefined) {
                        return;
                    }
                    return value + (value === 0 ? ' (pixel)' : ' (plane)');
                }

                document.getElementById('transferSyntax').textContent = getTransferSyntax();
                document.getElementById('sopClass').textContent = getSopClass();
                document.getElementById('samplesPerPixel').textContent = image.data.uint16('x00280002');
                document.getElementById('photometricInterpretation').textContent = image.data.string('x00280004');
                document.getElementById('numberOfFrames').textContent = image.data.string('x00280008');
                document.getElementById('planarConfiguration').textContent = getPlanarConfiguration();
                document.getElementById('rows').textContent = image.data.uint16('x00280010');
                document.getElementById('columns').textContent = image.data.uint16('x00280011');
                document.getElementById('pixelSpacing').textContent = image.data.string('x00280030');
                document.getElementById('bitsAllocated').textContent = image.data.uint16('x00280100');
                document.getElementById('bitsStored').textContent = image.data.uint16('x00280101');
                document.getElementById('highBit').textContent = image.data.uint16('x00280102');
                document.getElementById('pixelRepresentation').textContent = getPixelRepresentation();
                document.getElementById('windowCenter').textContent = image.data.string('x00281050');
                document.getElementById('windowWidth').textContent = image.data.string('x00281051');
                document.getElementById('rescaleIntercept').textContent = image.data.string('x00281052');
                document.getElementById('rescaleSlope').textContent = image.data.string('x00281053');
                document.getElementById('basicOffsetTable').textContent = image.data.elements.x7fe00010 && image.data.elements.x7fe00010.basicOffsetTable ? image.data.elements.x7fe00010.basicOffsetTable.length : '';
                document.getElementById('fragments').textContent = image.data.elements.x7fe00010 && image.data.elements.x7fe00010.fragments ? image.data.elements.x7fe00010.fragments.length : '';
                document.getElementById('minStoredPixelValue').textContent = image.minPixelValue;
                document.getElementById('maxStoredPixelValue').textContent = image.maxPixelValue;
                const end = new Date().getTime();
                const time = end - start;
                document.getElementById('totalTime').textContent = time + "ms";
                document.getElementById('loadTime').textContent = image.loadTimeInMS + "ms";
                document.getElementById('decodeTime').textContent = image.decodeTimeInMS + "ms";

            }, function (err) {
                alert(err);
            });
        }
        const element = document.getElementById('dicomImage');
        cornerstone.enable(element);
        //cornerstone.events.addEventListener('cornerstoneimageloadprogress', function (event) {
        //    const eventData = event.detail;
        //    const loadProgress = document.getElementById('loadProgress');
        //    loadProgress.textContent = `Image Load Progress: ${eventData.percentComplete}%`;
        //});



        document.getElementById('selectFile').addEventListener('change', function (e) {
            // Add the file to the cornerstoneFileImageLoader and get unique
            // number for that file
            const file = e.target.files[0];
            console.log(file)
            const imageId = cornerstoneWADOImageLoader.wadouri.fileManager.add(file);
            loadAndViewImage(imageId);
        });

    </script>
    @*<script>

        cornerstoneWADOImageLoader.external.cornerstone = cornerstone;

        cornerstoneWADOImageLoader.configure({
            beforeSend: function (xhr) {
                // Add custom headers here (e.g. auth tokens)
                //xhr.setRequestHeader('APIKEY', 'my auth token');
            },
        });

        var loaded = false;

        function loadAndViewImage(imageId) {
            var element = document.getElementById('dicomImage');

            try {
                var start = new Date().getTime();
                cornerstone.loadAndCacheImage(imageId).then(function (image) {
                    console.log(image);
                    var viewport = cornerstone.getDefaultViewportForImage(element, image);
                    //document.getElementById('toggleModalityLUT').checked = (viewport.modalityLUT !== undefined);
                    //document.getElementById('toggleVOILUT').checked = (viewport.voiLUT !== undefined);
                    cornerstone.displayImage(element, image, viewport);
                    if (loaded === false) {
                        cornerstoneTools.mouseInput.enable(element);
                        cornerstoneTools.mouseWheelInput.enable(element);
                        cornerstoneTools.wwwc.activate(element, 1); // ww/wc is the default tool for left mouse button
                        cornerstoneTools.pan.activate(element, 2); // pan is the default tool for middle mouse button
                        cornerstoneTools.zoom.activate(element, 4); // zoom is the default tool for right mouse button
                        cornerstoneTools.zoomWheel.activate(element); // zoom is the default tool for middle mouse wheel
                        loaded = true;
                    }

                    function getTransferSyntax() {
                        const value = image.data.string('x00020010');
                        return value + ' [' + uids[value] + ']';
                    }

                    function getSopClass() {
                        const value = image.data.string('x00080016');
                        return value + ' [' + uids[value] + ']';
                    }

                    function getPixelRepresentation() {
                        const value = image.data.uint16('x00280103');
                        if (value === undefined) {
                            return;
                        }
                        return value + (value === 0 ? ' (unsigned)' : ' (signed)');
                    }

                    function getPlanarConfiguration() {
                        const value = image.data.uint16('x00280006');
                        if (value === undefined) {
                            return;
                        }
                        return value + (value === 0 ? ' (pixel)' : ' (plane)');
                    }


                    document.getElementById('transferSyntax').textContent = getTransferSyntax();
                    document.getElementById('sopClass').textContent = getSopClass();
                    document.getElementById('samplesPerPixel').textContent = image.data.uint16('x00280002');
                    document.getElementById('photometricInterpretation').textContent = image.data.string('x00280004');
                    document.getElementById('numberOfFrames').textContent = image.data.string('x00280008');
                    document.getElementById('planarConfiguration').textContent = getPlanarConfiguration();
                    document.getElementById('rows').textContent = image.data.uint16('x00280010');
                    document.getElementById('columns').textContent = image.data.uint16('x00280011');
                    document.getElementById('pixelSpacing').textContent = image.data.string('x00280030');
                    document.getElementById('rowPixelSpacing').textContent = image.rowPixelSpacing;
                    document.getElementById('columnPixelSpacing').textContent = image.columnPixelSpacing;
                    document.getElementById('bitsAllocated').textContent = image.data.uint16('x00280100');
                    document.getElementById('bitsStored').textContent = image.data.uint16('x00280101');
                    document.getElementById('highBit').textContent = image.data.uint16('x00280102');
                    document.getElementById('pixelRepresentation').textContent = getPixelRepresentation();
                    document.getElementById('windowCenter').textContent = image.data.string('x00281050');
                    document.getElementById('windowWidth').textContent = image.data.string('x00281051');
                    document.getElementById('rescaleIntercept').textContent = image.data.string('x00281052');
                    document.getElementById('rescaleSlope').textContent = image.data.string('x00281053');
                    document.getElementById('basicOffsetTable').textContent = image.data.elements.x7fe00010.basicOffsetTable ? image.data.elements.x7fe00010.basicOffsetTable.length : '';
                    document.getElementById('fragments').textContent = image.data.elements.x7fe00010.fragments ? image.data.elements.x7fe00010.fragments.length : '';
                    document.getElementById('minStoredPixelValue').textContent = image.minPixelValue;
                    document.getElementById('maxStoredPixelValue').textContent = image.maxPixelValue;
                    var end = new Date().getTime();
                    var time = end - start;
                    document.getElementById('totalTime').textContent = time + "ms";
                    document.getElementById('loadTime').textContent = image.loadTimeInMS + "ms";
                    document.getElementById('decodeTime').textContent = image.decodeTimeInMS + "ms";

                }, function (err) {
                    throw err;
                });
            }
            catch (err) {
                throw err;
            }
        }

        function downloadAndView(downloadUrl) {
            let url = downloadUrl;
            // prefix the url with wadouri: so cornerstone can find the image loader
            url = "wadouri:" + url;
            // image enable the dicomImage element and activate a few tools
            loadAndViewImage(url);
        }

        const imageButtons = document.getElementsByClassName('imgbtn');
        for (let i = 0; i < imageButtons.length; i++) {
            const el = imageButtons[i];
            el.addEventListener('click', function (e) {
                const img = e.target.innerText;
                downloadAndView('https://raw.githubusercontent.com/cornerstonejs/cornerstoneWADOImageLoader/master/testImages/' + 'CT2_J2KR');
            });
        }

        cornerstone.events.addEventListener('cornerstoneimageloadprogress', function (event) {
            const eventData = event.detail;
            const loadProgress = document.getElementById('loadProgress');
            loadProgress.textContent = `Image Load Progress: ${eventData.percentComplete}%`;
        });

        function getUrlWithoutFrame() {
            var url = document.getElementById('wadoURL').value;
            var frameIndex = url.indexOf('frame=');
            if (frameIndex !== -1) {
                url = url.substr(0, frameIndex - 1);
            }
            return url;
        }

        var element = document.getElementById('dicomImage');
        cornerstone.enable(element);

        document.getElementById('downloadAndView').addEventListener('click', function (e) {
            downloadAndView();
        });
        document.getElementById('load').addEventListener('click', function (e) {
            var url = getUrlWithoutFrame();
            cornerstoneWADOImageLoader.wadouri.dataSetCacheManager.load(url);
        });
        document.getElementById('unload').addEventListener('click', function (e) {
            var url = getUrlWithoutFrame();
            cornerstoneWADOImageLoader.wadouri.dataSetCacheManager.unload(url);
        });

        document.getElementById('purge').addEventListener('click', function (e) {
            cornerstone.imageCache.purgeCache();
        });

        const form = document.getElementById('form');
        form.addEventListener('submit', function () {
            downloadAndView();
            return false;
        });

    </script>*@
</body>
</html>
